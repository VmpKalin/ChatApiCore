// <auto-generated />
using System;
using Chat.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Chat.Data.Migrations
{
    [DbContext(typeof(GeneralContext))]
    [Migration("20180808151316_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Chat.Data.Models.Entities.LikeModels.LikeBinding", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LikeEntity<PostEntity>Id");

                    b.Property<string>("LikeEntityId");

                    b.Property<DateTime>("Time");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LikeEntity<PostEntity>Id");

                    b.ToTable("LikeBindings");
                });

            modelBuilder.Entity("Chat.Data.Models.Entities.LikeModels.LikeEntity<Chat.Data.Models.Entities.PostEntity>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountOfLikes");

                    b.Property<string>("ModuleId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId")
                        .IsUnique()
                        .HasFilter("[ModuleId] IS NOT NULL");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Chat.Data.Models.Entities.MessageEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("RoomEntityId");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("RoomEntityId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Chat.Data.Models.Entities.PostEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("Time");

                    b.Property<string>("Title");

                    b.Property<string>("UserEntityId");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Chat.Data.Models.Entities.RoomEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LastMessage");

                    b.Property<int>("UnreadedMessages");

                    b.Property<string>("UserFromId");

                    b.Property<string>("UserToId");

                    b.HasKey("Id");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("Chat.Data.Models.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Chat.Data.Models.Entities.LikeModels.LikeBinding", b =>
                {
                    b.HasOne("Chat.Data.Models.Entities.LikeModels.LikeEntity<Chat.Data.Models.Entities.PostEntity>")
                        .WithMany("LikeBindings")
                        .HasForeignKey("LikeEntity<PostEntity>Id");
                });

            modelBuilder.Entity("Chat.Data.Models.Entities.LikeModels.LikeEntity<Chat.Data.Models.Entities.PostEntity>", b =>
                {
                    b.HasOne("Chat.Data.Models.Entities.PostEntity", "Module")
                        .WithOne("LikeInfo")
                        .HasForeignKey("Chat.Data.Models.Entities.LikeModels.LikeEntity<Chat.Data.Models.Entities.PostEntity>", "ModuleId");
                });

            modelBuilder.Entity("Chat.Data.Models.Entities.MessageEntity", b =>
                {
                    b.HasOne("Chat.Data.Models.Entities.RoomEntity", "RoomEntity")
                        .WithMany("Messages")
                        .HasForeignKey("RoomEntityId");
                });

            modelBuilder.Entity("Chat.Data.Models.Entities.PostEntity", b =>
                {
                    b.HasOne("Chat.Data.Models.Entities.UserEntity")
                        .WithMany("Posts")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("Chat.Data.Models.Entities.RoomEntity", b =>
                {
                    b.HasOne("Chat.Data.Models.Entities.UserEntity", "UserFrom")
                        .WithMany()
                        .HasForeignKey("UserFromId");

                    b.HasOne("Chat.Data.Models.Entities.UserEntity", "UserTo")
                        .WithMany()
                        .HasForeignKey("UserToId");
                });
#pragma warning restore 612, 618
        }
    }
}
